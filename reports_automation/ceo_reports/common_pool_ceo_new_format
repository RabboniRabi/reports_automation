"""

Module with functions to:
- Create the common pool report for the CEO review report.
- The code will create 2 sheets, one for elementary schools (Primary & Middle Schools) and another for
    secondary schools (High & Higher Secondary Schools)

"""
import sys
sys.path.append('../')

import utilities.utilities as utilities
import functools as ft
import utilities.file_utilities as file_utilities
import utilities.dbutilities as dbutilities
import utilities.ranking_utilities as ranking_utilities
import utilities.report_utilities as report_utilities


import pandas as pd
import os
from datetime import date
from pathlib import Path

"""
Step 0:
Define the all the variables in the report


Step 1: 
Make the 3 main definitions "get_cp_ceoreview_summary",get_elementary



"""

"-----------------------------------------------------------------------------------------------------------------------"
# Step 0:
# Global variables
# Column names are defined here so that they can be edited in one place
total_student_count  = 'total'
students_ageing30_count = 'last_30days'
district_name = 'district_name'
udise_col = 'udise_code'
school_name ='school_name'
edu_district_name = 'edu_dist_name'
block_name = 'block_name'
school_category = 'category'
school_level = 'school_level'
class_number = 'class'
beo_user = 'beo_user'
deo_user_elm = 'deo_name (elementary)'
deo_user_sec = 'deo_name (secondary)'
cwsn_students ='cwsn'
beo_rank = 'BEO Rank'
deo_rank_elm = 'DEO Rank Elementary'
deo_rank_sec = 'DEO Rank Secondary'
perc_students_cp = '% Students ageing > 30 days'
total_cwsn_students ='cwsn'
total_cp_students ='total'


merge_dict = {
    'on_values' : [district_name,block_name,school_name,school_category ,udise_col],
    'how' : 'left'
}

"-----------------------------------------------------------------------------------------------------------------------"



def main():

    """""
    #code for running the sql script:

    # Read the database connection credentials
    credentials_dict = dbutilities.read_conn_credentials('db_credentials.json')

    # Get the latest students and teachers count
    df_report = dbutilities.fetch_data_as_df(credentials_dict, 'common_pool_latest.sql')

    print('df_report fetched from db: ', df_report)
    """

    common_pool_basefile = file_utilities.user_sel_excel_filename()
    raw_data = pd.read_excel(common_pool_basefile, sheet_name='Abstract')
    raw_data.drop(columns=edu_district_name, axis=1, inplace=True)
    # Update the data with the BRC-CRC mapping
    data_with_brc_mapping = report_utilities.map_data_with_brc(raw_data, merge_dict)
    print(data_with_brc_mapping)
    #list_touse =  list(set(brc_crc_master_sheet.columns.to_list() + raw_data.columns.to_list()))
    #print(list_touse)

    # Pivot the data, grouping on
    data_pivot_ageing = pd.pivot_table(data_with_brc_mapping, values=students_ageing30_count, index= [district_name,block_name,school_category]
                              ,columns='class', aggfunc='sum').reset_index()
    print(data_pivot_ageing)

    data_pivot_total = pd.pivot_table(data_with_brc_mapping, values=total_cp_students, index=[district_name,block_name,school_category],
                          aggfunc='sum').reset_index()

    data_pivot_cwsn = pd.pivot_table(data_with_brc_mapping, values=total_cwsn_students, index=[district_name,block_name,school_category],
                          aggfunc='sum').reset_index()

    data_frames_merge = [data_pivot_ageing,data_pivot_total,data_pivot_cwsn]

    data_final = ft.reduce(lambda left, right: pd.merge(left, right, on=[district_name,block_name,school_category]), data_frames_merge)
    print(data_final)








if __name__ == "__main__":
    main()

